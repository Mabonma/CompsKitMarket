// <auto-generated />
using System;
using CompsKitMarket.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompsKitMarket.Core.Migrations
{
    [DbContext(typeof(MarketContext))]
    [Migration("20230516121736_FixRelationImagePart")]
    partial class FixRelationImagePart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StoreId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.CoolerTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descrtiption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoolerTypes");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.FormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormFactors");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.GrafProc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Freq")
                        .HasColumnType("float");

                    b.Property<int>("GProcs")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GrafProcs");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerID");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.ProcModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcModels");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.ProcSocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcSockets");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.TypeRam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeRams");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Orders.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeDelivery")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeOrder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Orders.PartStore", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.HasKey("PartId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("PartStores");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Orders.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkMode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OrderPart", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int>("PartsId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId", "PartsId");

                    b.HasIndex("PartsId");

                    b.ToTable("OrderPart");
                });

            modelBuilder.Entity("OrderStore", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int>("StoresId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId", "StoresId");

                    b.HasIndex("StoresId");

                    b.ToTable("OrderStore");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Charge", b =>
                {
                    b.HasBaseType("CompsKitMarket.Core.Entities.Kits.Part");

                    b.Property<byte>("Cpu4")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Cpu8")
                        .HasColumnType("tinyint");

                    b.Property<double>("Deep")
                        .HasColumnType("float");

                    b.Property<byte>("Fdd")
                        .HasColumnType("tinyint");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<byte>("Ide")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Pcle16")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Pcle6")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Pcle8")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Sata")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Usb")
                        .HasColumnType("tinyint");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.ToTable("Charge");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Cooler", b =>
                {
                    b.HasBaseType("CompsKitMarket.Core.Entities.Kits.Part");

                    b.Property<int>("CoolerTypeId")
                        .HasColumnType("int");

                    b.Property<byte>("CountFan")
                        .HasColumnType("tinyint");

                    b.Property<int>("Diam")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int>("Rpm")
                        .HasColumnType("int");

                    b.Property<int?>("SocketId")
                        .HasColumnType("int");

                    b.Property<int>("Tdp")
                        .HasColumnType("int");

                    b.Property<int>("TypeCooling")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasIndex("CoolerTypeId");

                    b.HasIndex("SocketId");

                    b.ToTable("Cooler");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Cpu", b =>
                {
                    b.HasBaseType("CompsKitMarket.Core.Entities.Kits.Part");

                    b.Property<double>("BaseFreq")
                        .HasColumnType("float");

                    b.Property<int>("BoxType")
                        .HasColumnType("int");

                    b.Property<byte>("Cores")
                        .HasColumnType("tinyint");

                    b.Property<string>("Crystal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Graf")
                        .HasColumnType("bit");

                    b.Property<double>("MaxFreq")
                        .HasColumnType("float");

                    b.Property<double>("MultiThread")
                        .HasColumnType("float");

                    b.Property<int>("ProcModelId")
                        .HasColumnType("int");

                    b.Property<int>("ProcSocketId")
                        .HasColumnType("int");

                    b.Property<int>("Tdp")
                        .HasColumnType("int");

                    b.Property<int>("Tehprocess")
                        .HasColumnType("int");

                    b.Property<int>("TypeRamId")
                        .HasColumnType("int");

                    b.HasIndex("ProcModelId");

                    b.HasIndex("ProcSocketId");

                    b.HasIndex("TypeRamId");

                    b.ToTable("Cpu");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Frame", b =>
                {
                    b.HasBaseType("CompsKitMarket.Core.Entities.Kits.Part");

                    b.Property<int>("ChargeLength")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("CoolHeight")
                        .HasColumnType("int");

                    b.Property<byte>("Fans")
                        .HasColumnType("tinyint");

                    b.Property<int>("Form")
                        .HasColumnType("int");

                    b.Property<bool>("Game")
                        .HasColumnType("bit");

                    b.Property<byte>("InsideHsdSize2")
                        .HasColumnType("tinyint");

                    b.Property<byte>("InsideHsdSize3")
                        .HasColumnType("tinyint");

                    b.Property<int>("MotherFormId")
                        .HasColumnType("int");

                    b.Property<int>("VideoLenght")
                        .HasColumnType("int");

                    b.HasIndex("MotherFormId");

                    b.ToTable("Frame");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Hsd", b =>
                {
                    b.HasBaseType("CompsKitMarket.Core.Entities.Kits.Part");

                    b.Property<int>("Connections")
                        .HasColumnType("int");

                    b.Property<int>("Form")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Vol")
                        .HasColumnType("int");

                    b.ToTable("Hsd");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Motherboard", b =>
                {
                    b.HasBaseType("CompsKitMarket.Core.Entities.Kits.Part");

                    b.Property<int>("CountRam")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<byte>("M2")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Pci1")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Pci16")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Pci4")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Pci8")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProcSocketId")
                        .HasColumnType("int");

                    b.Property<int>("RamFreq")
                        .HasColumnType("int");

                    b.Property<int>("Sata3")
                        .HasColumnType("int");

                    b.Property<int>("TypeRamId")
                        .HasColumnType("int");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("ProcSocketId");

                    b.HasIndex("TypeRamId");

                    b.ToTable("Motherboard");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Ram", b =>
                {
                    b.HasBaseType("CompsKitMarket.Core.Entities.Kits.Part");

                    b.Property<byte>("Count")
                        .HasColumnType("tinyint");

                    b.Property<int>("Freq")
                        .HasColumnType("int");

                    b.Property<string>("Timings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<double>("Vol")
                        .HasColumnType("float");

                    b.HasIndex("TypeId");

                    b.ToTable("Ram");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Video", b =>
                {
                    b.HasBaseType("CompsKitMarket.Core.Entities.Kits.Part");

                    b.Property<int>("BusInter")
                        .HasColumnType("int");

                    b.Property<int>("Cooling")
                        .HasColumnType("int");

                    b.Property<int>("GrafProcId")
                        .HasColumnType("int");

                    b.Property<bool>("Rtx")
                        .HasColumnType("bit");

                    b.Property<int>("VramTypeId")
                        .HasColumnType("int");

                    b.Property<int>("VramVol")
                        .HasColumnType("int");

                    b.HasIndex("GrafProcId");

                    b.HasIndex("VramTypeId");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Identity.User", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Orders.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Image", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", "Part")
                        .WithMany("Images")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Part", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Orders.Manufacturer", "Manufacturer")
                        .WithMany("Parts")
                        .HasForeignKey("ManufacturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Orders.Order", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Orders.PartStore", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", "Part")
                        .WithMany("PartStores")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Orders.Store", "Store")
                        .WithMany("PartStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderPart", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Orders.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", null)
                        .WithMany()
                        .HasForeignKey("PartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderStore", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Orders.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Orders.Store", null)
                        .WithMany()
                        .HasForeignKey("StoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Charge", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", null)
                        .WithOne()
                        .HasForeignKey("CompsKitMarket.Core.Entities.Kits.Charge", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Cooler", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.CoolerTypes", "CoolerTypes")
                        .WithMany("Coolers")
                        .HasForeignKey("CoolerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", null)
                        .WithOne()
                        .HasForeignKey("CompsKitMarket.Core.Entities.Kits.Cooler", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.ProcSocket", "Socket")
                        .WithMany("Coolers")
                        .HasForeignKey("SocketId");

                    b.Navigation("CoolerTypes");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Cpu", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", null)
                        .WithOne()
                        .HasForeignKey("CompsKitMarket.Core.Entities.Kits.Cpu", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.ProcModel", "ProcModel")
                        .WithMany("Cpus")
                        .HasForeignKey("ProcModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.ProcSocket", "ProcSocket")
                        .WithMany("Cpus")
                        .HasForeignKey("ProcSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.TypeRam", "TypeRam")
                        .WithMany("Cpus")
                        .HasForeignKey("TypeRamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcModel");

                    b.Navigation("ProcSocket");

                    b.Navigation("TypeRam");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Frame", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", null)
                        .WithOne()
                        .HasForeignKey("CompsKitMarket.Core.Entities.Kits.Frame", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.FormFactor", "MotherForm")
                        .WithMany("Frames")
                        .HasForeignKey("MotherFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MotherForm");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Hsd", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", null)
                        .WithOne()
                        .HasForeignKey("CompsKitMarket.Core.Entities.Kits.Hsd", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Motherboard", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.FormFactor", "FormFactor")
                        .WithMany("Motherboards")
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", null)
                        .WithOne()
                        .HasForeignKey("CompsKitMarket.Core.Entities.Kits.Motherboard", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.ProcSocket", "ProcSocket")
                        .WithMany("Motherboards")
                        .HasForeignKey("ProcSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.TypeRam", "TypeRam")
                        .WithMany("Motherboards")
                        .HasForeignKey("TypeRamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormFactor");

                    b.Navigation("ProcSocket");

                    b.Navigation("TypeRam");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Ram", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", null)
                        .WithOne()
                        .HasForeignKey("CompsKitMarket.Core.Entities.Kits.Ram", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.TypeRam", "Type")
                        .WithMany("Rams")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Video", b =>
                {
                    b.HasOne("CompsKitMarket.Core.Entities.Kits.GrafProc", "GrafProc")
                        .WithMany("Videos")
                        .HasForeignKey("GrafProcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.Part", null)
                        .WithOne()
                        .HasForeignKey("CompsKitMarket.Core.Entities.Kits.Video", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CompsKitMarket.Core.Entities.Kits.TypeRam", "VramType")
                        .WithMany("Videos")
                        .HasForeignKey("VramTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrafProc");

                    b.Navigation("VramType");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Identity.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.CoolerTypes", b =>
                {
                    b.Navigation("Coolers");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.FormFactor", b =>
                {
                    b.Navigation("Frames");

                    b.Navigation("Motherboards");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.GrafProc", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.Part", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("PartStores");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.ProcModel", b =>
                {
                    b.Navigation("Cpus");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.ProcSocket", b =>
                {
                    b.Navigation("Coolers");

                    b.Navigation("Cpus");

                    b.Navigation("Motherboards");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Kits.TypeRam", b =>
                {
                    b.Navigation("Cpus");

                    b.Navigation("Motherboards");

                    b.Navigation("Rams");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Orders.Manufacturer", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("CompsKitMarket.Core.Entities.Orders.Store", b =>
                {
                    b.Navigation("PartStores");
                });
#pragma warning restore 612, 618
        }
    }
}
